plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.142'
}

version = '1.3.0'
group = 'com.github.dashiedev'
archivesBaseName = "DTNPaletteOfPaws-1.21"

java.toolchain.languageVersion = JavaLanguageVersion.of(21)
println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

sourceSets {
    main {
        resources.srcDirs += 'src/generated/resources'
    }
}

minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')

runs {
    client {
        workingDirectory file('run')
        systemProperty 'forge.logging.console.level', 'debug'
        modSources.add(project.getSourceSets().main)
    }

    server {
        workingDirectory file('run-server')
        systemProperty 'forge.logging.console.level', 'debug'
        modSources.add(project.getSourceSets().main)
    }

    data {
        workingDirectory file('run')
        systemProperty 'forge.logging.console.level', 'debug'
        programArguments.addAll '--mod', 'dtnpaletteofpaws', '--all', '--output', '"' + file('src/generated/resources/') + '"', '--existing', '"' + sourceSets.main.resources.srcDirs[0] + '"'
        modSources.add(project.getSourceSets().main)
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    flatDir {
        dir 'libs'
    }
}


dependencies {
    implementation 'net.neoforged:neoforge:21.1.1'
    compileOnly "blank:DoggyTalentsNext-1.21.1:1.18.42"
}

jar {
    from sourceSets.main.output

    manifest {
        attributes([
            "Specification-Title": "DTN's Palette of Paws",
            "Specification-Vendor": "dashiedev",
            "Specification-Version": project.version,
            "Implementation-Title": project.name,
            "Implementation-Version": project.version,
            "Implementation-Vendor" :"dashiedev",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

tasks.named("processResources") {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

task vscodePrintRunClient {
    doFirst {
        println("vmArgs:")
        def vmArgs = vscodeFetchJVMArguments({ runs.client.realiseJvmArguments() })
        println(vmArgs)
        println("==================================")
        println("args:")
        def programArgs = vscodeFetchProgramArguments({ runs.client.getProgramArguments().get() })
        println(programArgs)
        println("==================================")
        println("")
        println("")
    }
}


task vscodePrintRunData {
    doFirst {
        println("vmArgs:")
        def vmArgs = vscodeFetchJVMArguments({ runs.data.realiseJvmArguments() })
        println(vmArgs)
        println("==================================")
        println("args:")
        def programArgs = vscodeFetchProgramArguments({ runs.data.getProgramArguments().get() })
        println(programArgs)
        println("==================================")
        println("")
        println("")
    }
}

task vscodePrintRunServer {
    doFirst {
        println("vmArgs:")
        def vmArgs = vscodeFetchJVMArguments({ runs.server.realiseJvmArguments() })
        println(vmArgs)
        println("==================================")
        println("args:")
        def programArgs = vscodeFetchProgramArguments({ runs.server.getProgramArguments().get() })
        println(programArgs)
        println("==================================")
        println("")
        println("")
    }
}


import groovy.json.StringEscapeUtils;

String vscodeFetchJVMArguments(Closure vmArgsGetter) {
    def vmArgs = "";
    List<String> args = vmArgsGetter();
    for (item in args) {
        def item1 = item;
        if (item.startsWith("-DignoreList=")) {
            def to_insert = "asm-9.5.jar,asm-commons-9.5.jar,asm-tree-9.5.jar,asm-util-9.5.jar,asm-analysis-9.5.jar,"
            def str = item;
            int equal_start = str.indexOf("=");
            item1 = str.substring(0, equal_start + 1) + to_insert + str.substring(equal_start + 1, str.length());
        }
        vmArgs = vmArgs + item1 + " "
    }

    return StringEscapeUtils.escapeJava(vmArgs);
}

String vscodeFetchProgramArguments(Closure programArgsGetter) {
    def programArgs = "";
    List<String> args = programArgsGetter();
    for (item in args) {
        def item1 = item;
        programArgs = programArgs + item1 + " "
    }
    return StringEscapeUtils.escapeJava(programArgs);
}
